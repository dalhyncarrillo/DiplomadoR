[
["index.html", "Diplomado en R Capítulo 1 Prerequisitos 1.1 Instalación de R 1.2 Entornos de desarrollo para R", " Diplomado en R Francisco Javier Luna Vázquez 2017-04-10 Capítulo 1 Prerequisitos 1.1 Instalación de R Empezaremos por lo más básico, Podemos instalar R desde el siguiente link: https://www.r-project.org/ Pero como muchos somos algo despistados, estas son las maneras más sencillas para instalar R en distintos Sistemas Operativos: Sistema Operativo Método Windows CRAN-R-Windows.Exe Debian y derivados sudo apt-get install r-base Redhat y derivados sudo yum install R-core R-devel Arch y derivados sudo pacman -S r Mac https://www.youtube.com/watch?v=ICGkG7Gg6j0 1.1.1 Comprobar la instalación de R Windows Iniciar el programa desde su acceso directo en el escritorio o desde el menú de programas. Para salir de la aplicación ejecutar lo siguiente q() Linux Abrir la terminal Ejecutar el comando de inicio de R: R Salir de la aplicación con el comando: q() 1.2 Entornos de desarrollo para R Una vez instalado, un entorno de desarrollo integrado será necesario para facilitar el desarrollo de códigos en R, por lo que se presentan tres de varias opciones para trabajar con R. IDE Link Tinn-R https://sourceforge.net/projects/tinn-r/ RStudio [Recomendado] https://www.rstudio.com/ R commander (Rcmdr) http://www.rcommander.com/ 1.2.1 Instalación RStudio RStudio IDE En este caso, Sera necesario instalar RStudio para realizar los ejercicios de manera cómoda, por lo que, para instalar RStudio para los distintos Sistemas Operativos podemos hacerlo desde la liga principal, o para evitar buscar podemos usar la liga que más nos convenga de la siguiente tabla. Rstudio enlace Windows x64 Linux Mac Y finalmente sera necesario tener instalados el siguiente paquete: install.packages(&quot;rmarkdown&quot;, dependencies = TRUE) Con dicho paquete crearemos documentos dinamicos en la tercera parte del curso. "],
["intro.html", "Capítulo 2 Introducción a R 2.1 Primeros pasos 2.2 Clases de datos 2.3 Manejo de datos", " Capítulo 2 Introducción a R R es un potente software y a su vez un lenguaje orientado a objetos destinado al análisis estadistico y la representación de datos, es completamente gratuito y de código abierto, por lo que la comunidad científica, las empresas y las universidades lo están implementando cada vez más. 2.1 Primeros pasos Para interactuar con R se dispone de una potente línea de comandos y en un principio, la manera más sencilla de ver R es que puede ser usado como una calculadora: Como sumar: 10 + 5 ## [1] 15 o dividir: 10/5 ## [1] 2 Sin embargo, su potencial va más allá… Principalmente por que este documento ha sido diseñado en R y RMarkdown ;) 2.1.1 Espacio de trabajo Si se realizó la prueba de instalación, al momento de ejecutar el comando q() para finalizar la ejecución de R, esté manda un mensaje si se desea guardar el espacio de trabajo actual (“workspace”), dicho espacio es donde se incluyen todos los objetos que han sido creados por los scripts (se explicará más a detalle sobre los objetos en las siguientes secciones), si se almacenan en disco dichos objetos volverán a ser cargados al iniciar la sesión de R. 2.1.2 Establecer directorios de trabajo Al ejecutar R, este establece un directorio de trabajo, es decir, establece una carpeta donde guardar los datos ejecutados en R, misma que será la carpeta que usara para buscar, leer y escribir los archivos (de ser requerido) durante la sesión (es decir, mientras se mantiene el programa abierto), por ello, para obtener el directorio de trabajo actual basta con usar el siguiente comando: getwd() ## [1] &quot;/home/frahik/Documentos/R-project/DiplomadoR&quot; Dicho directorio va a variar dependiendo del sistema, por ello, más de una vez será necesario modificar esta ruta, para lo cual se usara el comando setwd(&quot;Ruta&quot;), el cual varia dependiendo del Sistema Operativo, como buena practica del programador, se recomienda establecer el directorio de trabajado dentro de la carpeta de Documentos, además de que es más sencillo encontrar los proyectos de trabajo, si se usa la ruta ruta relativa y no la ruta física, si se requiere mover todos los archivos para trabajar en otra computadora, no se tendrá que volver a modificar todo el directorio de trabajo. Ejemplo usando la Ruta relativa en Linux setwd(&quot;~/Documentos/Curso&quot;) #Linux Ejemplo usando la Ruta física y la ruta relativa en Windows setwd(&quot;C:\\\\Usuario\\\\Documentos\\\\Curso&quot;) #MALA PRACTICA (Ruta física) setwd(&quot;~/Curso&quot;) #BUENA PRACTICA (Ruta relativa del comando anterior) Si se a trabajado con las terminales del sistema operativo antes, los comandos 2.1.3 Creación de objetos/variables En R podemos crear y manipular objetos asignándole valores, cadenas de texto, funciones y un largo etc. Por ser el primer contacto con R, crearemos un objeto (izquierda del símbolo =), asignándole como valor la cadena de texto “Hola mundo”. Es importante aclarar que es necesario que se pongan dobles comillas &quot; &quot; o comillas simples ' ' al escribir una cadena de texto, de otra manera será interpretado como uno o varios objetos, ejemplo: saludo = Hola ## Error in eval(expr, envir, enclos): objeto &#39;Hola&#39; no encontrado Por lo que, para insertar la cadena de texto “Hola mundo” en la variable saludo, se deberá hacer como se mencionó anteriormente: saludo = &quot;Hola mundo&quot; Ahora para mostrar en consola lo que contiene la variable u objeto saludo, lo escribiremos tal cual y obtendremos una salida muy similar a la siguiente. ## [1] &quot;Hola mundo&quot; NOTAS IMPORTANTES: R es sensible a las MAYÚSCULAS y minúsculas, por lo que saludo no es igual a Saludo, ni a SALUDO. R NO requiere explicitar que tipo de valores van a contener las variables. Otra manera de asignar valores a las variables es mediante el símbolo &lt;- que se compone de un menor que y el signo de menos. x &lt;- 10 + 5 «Podemos ver a las variables como una persona, cada persona tiene su nombre para poder ser identificadas sobre el resto de las personas, pero bajo la manera de ordenar del lenguaje R, si dos personas quieren llamarse de la misma manera, la nueva persona tiene que ‘eliminar’ a la persona ya existente para poder tomar su lugar.» Se recomienda incluir un espacio simple a cada lado del operador de asignación para incrementar la legibilidad. Pero NO coloques un espacio entre el &lt; y el - que forman la flecha, recuerda que a pesar de estar compuesto por dos caracteres es un único símbolo. Es posible reasignar un valor a la variable que hemos creado, así como reutilizar el valor de la variable para realizar un calculo: y &lt;- x + 5 y Ahora reutilizaremos el valor de la variable y: ## [1] 20 Recuerde que aunque pareciera algo matemático, los símbolos &lt;- y = no funcionan como un «igual», si no, como un «equivale a» o una «asignación», por que a partir de ese momento, el valor de la derecha se le asigna al de la izquierda. 2.2 Clases de datos Existen 4 tipos de clases de objetos con las que tendremos que trabajar en R, cada uno tiene sus ventajas y desventajas, así que se verá de manera detalla como crear cada uno de ellos, acceder a sus valores, así como posibles problemas. 2.2.1 Vector Desde que empezamos con la variable saludo, estábamos trabajando con vectores, sin embargo, era un vector de indice 1, dado que en R no existen como en otros lenguajes las variables individuales, todas a las que se les asigna un valor o más, son tratados inicialmente como vectores. La manera de representar un vector es de la siguiente forma: Valor1 Valor2 Valor3 … Valorn Una forma de ver a los vectores, es como la fila de espera del banco, todos tienen un turno único, pero que puede ser transferible, por lo que si mando a llamar el primer turno, solo el cliente con ese turno sera el que pasará a ventanilla, pero mientras, el cliente con turno 10, puede ser que esté guardando el lugar para un amigo y cuando el amigo llegue, el nuevo cliente sustituira al actual cliente con el turno 10. Una vez entendido el mensaje anterior, existen varias formas de declarar un vector de más de un valor, la manera más sencilla es a través de la función concatenar c(...); la cual es una función genérica que combina los valores separado por comas en un vector. Ejemplos: Vector con un varios datos y un NA. vector &lt;- c(1:9,NA,10:15) vector ## [1] 1 2 3 4 5 6 7 8 9 NA 10 11 12 13 14 15 Vector de nombres de personas vectorNombres &lt;- c(&quot;Francisco&quot;,&quot;Claudia&quot;,&quot;Valeria&quot;,&quot;Fernando&quot;,&quot;Julia&quot;) vectorNombres ## [1] &quot;Francisco&quot; &quot;Claudia&quot; &quot;Valeria&quot; &quot;Fernando&quot; &quot;Julia&quot; Vector con los datos de otros vectores vec1 &lt;- 1 vec2 &lt;- 20:30 vecFinal &lt;- c(vec1,vec2) vecFinal ## [1] 1 20 21 22 23 24 25 26 27 28 29 30 Ya que hemos visto como se crea un vector ahora veremos como acceder y trabajar con los valores de un vector. 2.2.1.1 Acceder a uno o varios datos del vector. Tenemos el siguiente vector que tiene almacenado el nombre de 6 clientes. vector &lt;- c(&quot;Francisco&quot;,&quot;Claudia&quot;,&quot;Valeria&quot;,&quot;Fernando&quot;,&quot;Julia&quot;, &quot;Osval&quot;) Francisco Claudia Valeria Fernando Julia Osval En R a diferencia de otros lenguajes de programación como C o Java, los índices de un vector o una matriz siempre inician en 1 y no en 0 como en esos otros lenguajes, por lo que la tabla anterior se podría observar de la siguiente manera: 1 2 3 4 5 6 Francisco Claudia Valeria Fernando Julia Osval Donde el primer indice, hace referencia al primer elemento del vector, el segundo indice al segundo elemento y así de manera consecutiva. Por lo que para acceder a uno o varios elementos se pueden utilizar los siguientes códigos: Un elemento en especifico vector[3] ## [1] &quot;Valeria&quot; Varios elementos en secuencia. vector[2:4] ## [1] &quot;Claudia&quot; &quot;Valeria&quot; &quot;Fernando&quot; Un elemento especificado anteriormente. n &lt;- 3 vector[n] ## [1] &quot;Valeria&quot; Varios elementos especificados vector[c(1,2,5)] ## [1] &quot;Francisco&quot; &quot;Claudia&quot; &quot;Julia&quot; Todos los elementos, excluyendo uno especifico. vector[-3] ## [1] &quot;Francisco&quot; &quot;Claudia&quot; &quot;Fernando&quot; &quot;Julia&quot; &quot;Osval&quot; Todos los elementos, excluyendo varios. vector[-c(4:6)] ## [1] &quot;Francisco&quot; &quot;Claudia&quot; &quot;Valeria&quot; Almacenar los datos extraídos en otra variable. grupo1 &lt;- vector[-c(4:6)] grupo1 ## [1] &quot;Francisco&quot; &quot;Claudia&quot; &quot;Valeria&quot; Modificar un elemento especifico de un vector vector[4] &lt;- &quot;Alberto&quot; vector ## [1] &quot;Francisco&quot; &quot;Claudia&quot; &quot;Valeria&quot; &quot;Alberto&quot; &quot;Julia&quot; &quot;Osval&quot; Modificar varios elementos de un vector vector[4:6] &lt;- NA vector ## [1] &quot;Francisco&quot; &quot;Claudia&quot; &quot;Valeria&quot; NA NA NA Encontrar las posiciones de los valores NA (Not Available) en un vector is.na(vector) ## [1] FALSE FALSE FALSE TRUE TRUE TRUE Encontrar las posiciones de los valores que no sean NA en un vector !is.na(vector) ## [1] TRUE TRUE TRUE FALSE FALSE FALSE Extrar los elementos de las posiciones en los que los valores NO son NA which(!is.na(vector) == TRUE) ## [1] 1 2 3 #Alternativa which(is.na(vector) == FALSE) ## [1] 1 2 3 Extrar las posiciones del vector que cumplan con una consulta which(vector == &quot;Francisco&quot;) ## [1] 1 Modificar las posiciones del vector que cumplan con una consulta vector[which(vector == &quot;Francisco&quot;)] &lt;- &quot;Francisco Javier&quot; 2.2.1.2 Ordenar los datos de un vector Para ordenar los datos existe la función sort(...). Ordenar un vector de forma creciente sort(vector) ## [1] &quot;Claudia&quot; &quot;Francisco Javier&quot; &quot;Valeria&quot; Ordenar un vector de forma decreciente sort(vector, decreasing = TRUE) ## [1] &quot;Valeria&quot; &quot;Francisco Javier&quot; &quot;Claudia&quot; Ordenar un vector y conocer sus antiguas posiciones. sort(vector, decreasing = TRUE, index.return = TRUE) ## $x ## [1] &quot;Valeria&quot; &quot;Francisco Javier&quot; &quot;Claudia&quot; ## ## $ix ## [1] 3 1 2 Este último método retorna dos listas, la primera es $x que representa la lista de los valores ordenados y la segunda es $ix que representa las antiguas posiciones de los valores. 2.2.1.3 Tratar los datos de un vector Tenemos un vector con los gastos de la última semana: gastos &lt;- c(150,120,300,250,400,380,100) que se pueden representar de la siguiente manera: 150 120 300 250 400 380 100 En R ya existen varias funciones para ser utilizadas, se mostrará el funcionamiento de algunas de ellas y otras más podrán ser encontradas en el Capitulo 5 (Apéndices). * El menor gasto en la semana min(gastos) ## [1] 100 El mayor gasto en la semana max(gastos) ## [1] 400 Obtener el promedio de gasto en la semana. mean(gastos) ## [1] 242.8571 Obtener el total del gasto de la semana, (Sumar todos los elementos). sum(gastos) ## [1] 1700 Obtener el total del gasto de una semana laboral (Lunes-Viernes), (Sumar elementos específicos) sum(gastos[1:5]) ## [1] 1220 Obtener la varianza del gasto semanal var(gastos) ## [1] 15157.14 Obtener la desviación estándar del gasto semanal sd(gastos) ## [1] 123.1143 Obtener un resumen de los datos summary(gastos) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 100.0 135.0 250.0 242.9 340.0 400.0 Este último comando muestra mucha información de utilidad, el valor mínimo, el primer cuantil, la mediana, el promedio, el tercer cuantil y el valor máximo dentro del vector. Con el cuál, se puede ahorrar tiempo a que si se utiliza de manera separada como se ve en los primeros tres comandos. 2.2.1.4 Problemas comunes 2.2.1.4.1 Mayúsculas y mínusculas Como ya se mencionó anteriormente, R es sensible a las Mayúsculas y Minúsculas, por lo que las funciones no funcionaran si se ponen total o parcialmente en Mayúsculas, para comprender ésto veremos dos ejemplos: Crear un vector: MAL [X] vector &lt;- C(1,2,3) ## Error in C(1, 2, 3): object not interpretable as a factor BIEN [O] vector &lt;- c(1,2,3) Sumar los datos de un vector: MAL [X] vector &lt;- c(1,2,3) SUM(vector) ## Error in eval(expr, envir, enclos): no se pudo encontrar la función &quot;SUM&quot; BIEN [O] vector &lt;- c(1,2,3) sum(vector) ## [1] 6 2.2.2 Matriz Para crear una matriz en R se utiliza la función matrix(data = NA, nrow = 1, ncol = 1, byrow = FALSE, dimnames = NULL) Donde matrix() corresponde al nombre de la función y todo lo que está dentro de los paréntesis son los argumentos de dicha función. Argumentos Significado del argumento data Son los datos a ingresar en la matriz. nrow Número deseado de filas. ncol Número deseado de columnas. byrow Valor lógico. Si es falso (valor por defecto), la matriz se llena por orden columna, de otra manera se llenará primero por filas. dimnames Utilizado para darles nombres a las filas y a las columnas, respectivamente. Algunos ejemplos de como crear una matriz: Una matriz de NA de 5 * 5: matrix(NA,nrow = 5, ncol = 5) ## [,1] [,2] [,3] [,4] [,5] ## [1,] NA NA NA NA NA ## [2,] NA NA NA NA NA ## [3,] NA NA NA NA NA ## [4,] NA NA NA NA NA ## [5,] NA NA NA NA NA Una matriz desde los datos de un vector: vector &lt;- c(&quot;Francisco&quot;,500) matrix() 2.2.2.1 Trabajar con matrices some text 2.2.2.2 Ordenar datos some text 2.2.2.3 Extraer datos some text 2.2.2.4 Tratar los datos (apply) some text 2.2.2.5 Problemas comunes 2.2.2.5.1 Los nombres en dimnames no concuerdan con las dimensiones de la matriz. 2.2.2.5.2 Los datos no se ordenan o se desordenan. 2.2.2.5.3 Los datos no concuerdan con las dimensiones de la matriz Supongamos que tenemos un vector en secuencia del 1 hasta el 31 y queremos representar solo el mes de mayo del 2017 vector &lt;- 1:31 matrix(vector, nrow = 5, ncol=7, byrow=T) ## Warning in matrix(vector, nrow = 5, ncol = 7, byrow = T): la longitud de ## los datos [31] no es un submúltiplo o múltiplo del número de filas [5] en ## la matriz ## [,1] [,2] [,3] [,4] [,5] [,6] [,7] ## [1,] 1 2 3 4 5 6 7 ## [2,] 8 9 10 11 12 13 14 ## [3,] 15 16 17 18 19 20 21 ## [4,] 22 23 24 25 26 27 28 ## [5,] 29 30 31 1 2 3 4 Vemos que R nos ha devuelto un error que nos indica que el vector de datos no es un submúltiplo o múltiplo del número de filas y columnas de la matriz, en otras palabras, la matriz es de 5 renglones por 7 columnas, es decir, tendrá un espacio para ingresar 35 valores y nosotros estamos ingresando solo 31, por lo que R intentará completar la matriz repitiendo el vector hasta completar los 35 valores. Si nosotros no queremos que suceda esto debemos de completar la cantidad de datos, existen varias maneras de solucionar este problema, este es uno de varias de ellas: vector &lt;- 1:31 matrix(c(vector,NA,NA,NA,NA), nrow = 5, ncol=7, byrow=T) ## [,1] [,2] [,3] [,4] [,5] [,6] [,7] ## [1,] 1 2 3 4 5 6 7 ## [2,] 8 9 10 11 12 13 14 ## [3,] 15 16 17 18 19 20 21 ## [4,] 22 23 24 25 26 27 28 ## [5,] 29 30 31 NA NA NA NA Lo que sucede aquí es que al vector le agregamos 4 valores NA que significa que no están disponibles y ahora tenemos un vector de longitud 35, la cual entra exactamente en la matriz de 5*7. ### Data Frame Los dataframes, son una clase parecida a las matrices, sin embargo, poseen determinadas características que las hace más útiles en ciertas ocasiones. Al igual que los vectores y matrices, existen varias formas de crear data frames, una forma sencilla de crearlos es especificar los datos de las columnas como en el ejemplo siguiente: data.frame(w = 1, x = 1:5, y = LETTERS[1:5], z=runif(5)) ## w x y z ## 1 1 1 A 0.29192550 ## 2 1 2 B 0.21861321 ## 3 1 3 C 0.37794577 ## 4 1 4 D 0.38757682 ## 5 1 5 E 0.06210559 2.2.2.6 Crear un Data frame 2.2.2.7 Trabajar con Data frames 2.2.2.8 Ordenar los datos de un Data frame 2.2.2.9 Extraer datos de un data frame 2.2.2.10 Tratar los datos de un data frame(apply) 2.2.2.11 Problemas comunes 2.2.3 Lista 2.2.3.1 Crear una lista 2.2.3.2 Trabajar con listas 2.2.3.3 Ordenar los datos de una lista 2.2.3.4 Extraer datos de una lista 2.2.3.5 Tratar los datos de una lista 2.2.3.6 Problemas comunes 2.3 Manejo de datos 2.3.1 Salvar datos En algún momento, tendremos la necesidad de guardar o leer algo en un formato determinado, sea .csv o .Rdata, veamos unos ejemplos que podrán ser de utilidad. 2.3.1.1 CSV (Comma-separated values) Un formato muy utilizado en R a parte de los .RData (que son archivos especiales de R), para exportar los datos en dicho formato: df = data.frame(runif(10), runif(10), runif(10)) names(df) = c(&quot;dato1&quot;, &quot;dato2&quot;, &quot;dato3&quot;) write.table(df, file = &quot;dataframe1.csv&quot;, sep = &quot;,&quot;, col.names = NA, qmethod = &quot;double&quot;) En caso de que no se quisiera exportar el nombre de las filas, basta con modificar un poco el código, como en el siguiente ejemplo: write.table(df, file = &quot;dataframe2.csv&quot;, sep = &quot;,&quot;, row.names = FALSE, qmethod = &quot;double&quot;) 2.3.1.2 .RData Si tienes objetos que te gustaría guardar como tal para luego procesarlos o simplemente se te hace más sencillo comprenderlo sobre un .csv, los comandos serán los siguientes: foo = &quot;bar&quot; save(foo, file=&quot;nombre.RData&quot;) 2.3.2 Leer datos 2.3.2.1 CSV read.table(&quot;dataframe1.csv&quot;, header = TRUE, sep = &quot;,&quot;, row.names = 1) Y si no se quieren importar los nombres de las filas optaremos por el siguiente comando: read.table(&quot;dataframe2.csv&quot;, header = TRUE, sep = &quot;,&quot;) Aunque, la forma más sencilla de importar un .csv es a través del comando read.csv(...), cuya implementación es la siguiente: read.csv(file, header = TRUE, sep = &quot;,&quot;, dec = &quot;.&quot;, ...) Dónde: Argumentos Significado o uso file Ruta al archivo, en caso de estar en el mismo directorio de trabajo poner solo el nombre del archivo, de otro modo ingresar la ruta completa header Valor lógico para determinar si el archivo incluye encabezados en la primera linea. sep Este campo sirve para especificar el carácter de separación. dec El carácter usado para los puntos decimales ... Ver la documentación para argumentos extras Un ejemplo seria el siguiente: csv &lt;- read.csv(&quot;dataframe1.csv&quot;) 2.3.2.2 .RData para volver a cargar los datos: load(&quot;nombre.RData&quot;) Para llamar el objeto, basta con volver a introducir su variable, que, aunque no haya sido creada antes de usar la función load(), esta se encarga de crear el objeto y asignarle el valor que decidimos guardar en un principio, ver 2.3.1.2. foo ## [1] &quot;bar&quot; 2.3.2.2.1 Problemas comunes con .RData 2.3.2.2.1.1 Error al cargar los datos R dice que no los datos que trato de cargar no existen pero yo veo que sí existen en mi carpeta. 2.3.2.2.1.2 ¿Donde están los datos? 2.3.2.2.1.3 ¿Cuales son los datos que cargué? "],
["RStudio.html", "Capítulo 3 Introducción a RStudio 3.1 El entorno y los paneles 3.2 Proyectos", " Capítulo 3 Introducción a RStudio 3.1 El entorno y los paneles RStudio es un entorno de desarrollo para el lenguaje de programación en R de código libre, contiene potentes herramientas para facilitar el desarrollo de procesos matemáticos, estadísticos, llevar un control de versiones, fácil visualización, modificación e implementación de las rutinas en R, además entre sus potentes herramientas incluye Rmarkdown, el cual fué desarrollado para crear documentos interactivos, para facilitar la transmisión de ideas entre los desarrolladores de R sin tener que preocuparse por tener que desarrollar la documentación con diversos programas, pero por el momento nos enfocaremos solo en conocer el entorno de desarrollo de RStudio. En la siguiente imagen se puede observar la interfaz completa para RStudio. Rstudio Rstudio se compone por 4 secciones, las cuales están divididas en 12 importantes paneles que pueden ser configurados a las necesidades de cada persona. 3.1.1 Panel de código Panel de código El panel de código es básicamente imprescindible, nos permitirá estar trabajando con todos nuestros scripts, ejecutarlos, en este panel además de permitirnos escribir nuestro código para salvarlo y después utilizarlo, cuenta con resaltado de sintaxis para los scripts de R, para que en el aspecto visual podamos ir identificando posibles errores al momento; para modificar el resaltado de sintaxis, tamaño de letra y otros aspectos de este panel solo es necesario presionar [ALT] + [T] o presionar en la barra de herramientas seleccionar Tools y presionar [ALT] + [G] o directamente en Global Options..., seleccionamos Appearance y nos saldrá la siguiente ventana: Appearance En esta ventana podremos controlar el resaltado de sintaxis para hacerlo lo más visualmente atractivo para nosotros, así como el tamaño y la fuente que deseamos utilizar, Para aplicar los cambios una vez que nos encontremos satisfechos solo se ha de presionar el botón [OK], si queremos descartar todos los cambios que se realizaron en ese momento (si no se ha presionado [Apply] u [OK]), se ha de presionar el botón [Cancel] y para ir observando los cambios al momento se ha de presionar el botón [Apply]. Opciones Identificador Uso o significado 1 Pestaña de trabajo actual. 2 Abrir el código en una ventana independiente. 3 Guardar el archivo del código actual. 4 Si esta seleccionado, el código será ejecutado cada vez que se guarde el archivo. 5 Buscar o Reemplazar una parte del código. 6 Herramientas para el código. 7 Genera un reporte del código actual en base a los comentarios en el código (No recomendable). 8 Ejecutar la línea de código seleccionada. 9 Se vuelve a ejecutar el bloque ejecutado anteriormente. 10 Ejecutar todo el código con el comando source(...). 11 Despliega una ventana para ayudar en la navegación del código (Ideal para navegar entre grandes scripts). Además de tener todas estás funcionalidades a la mano, tambien es posible acceder a algunas de ellas de manera rápida a tráves del teclado como se puede observar en la siguiente tabla. Comando Uso [Control] + [Shift] + [A] Formatea el código de R que se encuentre seleccionado. [Tab] Abre la opción de auto-completado en función a lo que se va escribiendo. [Control] + [Enter] Ejecutar la línea que se encuentre seleccionada (pueden ser varias). [Control] + [S] Salvar el archivo en el que se esta trabajando. [F1] Acceder a la ayuda del comando que se está escribiend o esté seleccionado. 3.1.2 Panel de Consola Consola Este panel es la consola bien conocida de R, donde podremos interactuar directamente con ella o a traves del panel de código. Existe un comando que nos servirá de ayuda en caso de que ocupemos abortar la ejecución actual de R [CONTROL] + [C]. Además de que al igual que el Panel de código, el panel de consola cuenta con autocompletado, podemos ir escribiendo un comando y con la tecla [TAB] podemos acceder al autocompletado y en caso de tener dudas podemos usar la tecla [F1] para acceder de manera rápida a la ayuda. 3.1.3 Panel de entorno Dentro los paneles del lado derecho, podemos observar el panel de entorno, el trabajo de este panel es mostrar los datos que nosotros estamos trabajando en R para no perder de vista si ya hemos creado una variable o si dicha variable contiene los datos que debe contener, para poder sacar el maximo provecho a este panel deberemos de considerar lo siguiente: Nos muestra nuestras variables. Permite limpiar la entorno con un solo clic (en vez de escribir el comando rm(list=ls()), RStudio lo hace por nosotros). Permite importar bases de datos en distintos formatos (La primera vez requerira instalar algunos paquetes). Panel de entorno De manera superficial, este panel en la mayoría de los casos nos puede servir para dar una vista rapida al entorno y saber si la o las variables que creamos ya existen o si nos falta ejecutar alguna parte de nuestro código, ahora veremos más a detalle las opciones que nos ofrece este panel. Opciones de Entorno Identificador Uso o significado 1 Cargar un área de trabajo. 2 Guardar el área de trabajo actual. 3 Importar una nueva base de datos (desde SPSS, CSV, Excel y otros). 4 Limpiar el área de trabajo actual (Entorno). 5 Alternar la vista de los datos entre modo lista y modo tabla. 6 Mostrar los datos creados por varios entornos (Entorno global o a nivel de paquetes). 7 Permite filtrar y buscar algún objeto de interes por su nombre. 8 Así se muestra un vector. 9 Así se muestra una matriz y un dataframe, la diferencia se encuentra en que al crear un dataframe aparece un botón para desplegar sus datos. 10 Muestra los datos que contiene una matriz o un dataframe especifico. 3.1.4 Panel de historial Panel de historial El panel del historial es otro panel bastante simple, su importancia radica en que cada vez que un comando es ejecutado irá a parar a este panel, así que sin importar cuantas veces cerremos RStudio, ese historial seguira ahí, si en algun momento queremos volver a buscar un comando podremos encontrarlo aquí, para conocer más a detalle este panel tenemos las siguientes opciones: Opciones Historial Identificador Uso o significado 1 Cargar un historial. 2 Guardar el historial en un archivo. 3 Mandar al panel de consola el comando seleccionado. 4 Mandar al panel de código el comando seleccionado. 5 Remover los comandos seleccionados del historial. 6 Eliminar todo el historial de comandos usados. 7 Permite filtrar y buscar algún comando de interes por parte de su contenido. 3.1.5 Panel de Construcción Panel de construcción Posiblemente el panel menos utilizado, solo aparece cuando estamos construyendo un paquete para R y su trabajo es construirlo para poder realizar pruebas en el entorno de R, de manera muy superficial tenemos las siguientes opciones: Opciones Construcción Identificador Uso o significado 1 Construir o recargar el paquete. 2 Revisar que el paquete este correctamente instalado (entre otras pequeñas funciones). 3 Diversas opciones que permiten hacer pruebas, empaquetar los paquetes para distribución entre otras funciones. 3.1.6 Panel de Control de versiones (Git) Un panel bastante importante para los que ocupan trabajar con varias versiones de un mismo archivo o los que trabajan en el desarrollo de paquetes para R, hablar del control de versiones y como implementarlo en GitHub es agregar otro curso dentro de este curso, por lo que no nos saldremos del alcance y rescataremos las partes más importantes para aquellos que ya saben utilizar el controlador de versiones git. git La imagen anterior es una muestra de del uso de este panel y las opciones que se muestran se describen acontinuación Opciones Git Identificador Uso o significado 1 Muestra las diferencias entre la antigua versión de un archivo y su nueva versión. 2 Comenta los archivos seleccionados (staged) para guardar una nueva versión de ellos. 3 Recupera las ultimas modificaciones del repositorio realizadas en otras computadoras. 4 Sube al repositorio las ultimas modificaciones “comentadas(ver identificador 2)” en la maquina. 5 Muestra un historial de las modificaciones realizadas. 6 Otras opciones (Ignorar un archivo seleccionado o revertir la modificación) 7 Rama (branch) a la que se desea subir las modificaciones del archivo. 8 Recargar el panel. 9 Caja para seleccionar los archivos a comentar (ver identificador 2), ignorar o revertir (ver identificador 7) 10 El estado en el cuál se encuentra el archivo, (M es Modificado, ? es que aun no se encuentra en el respositorio, A significa que se agregará al repositorio y D es que se elimina del repositorio. 11 Es el archivo que está siendo supervisado por el controlador de versiones. 3.1.7 Panel de archivos Volviendo a los paneles sencillos, este panel hace la función de explorador de archivos, para evitar la necesidad de estar abriendo y cerrando esta aplicación, podremos navegar hasta la carpeta de nuestro archivo de interés o si estamos trabajando por proyectos, veremos que esta ventana se actualiza directamente a la carpeta donde está ‘hospedada’ el proyecto, sin duda es de mayor utilidad de está forma, pero antes de hablar sobre los proyectos en RStudio, veremos un par de paneles más. Panel de archivos La imagen anterior es la vista que comunmente se obtiene donde las carpetas que todos conocemos (Descargas, Documentos, Escritorio, etc.) son las que nos muestra RStudio, algunas de las opciones más importantes son las siguientes: Opciones Archivos Identificador Uso o significado 1 Crear una nueva carpeta en el directorio de trabajo actual. 2 Seleccionar algún archivo o carpeta para realizar alguna de las operaciones de los identificadores siguientes. 3 Eliminar el archivo o carpeta seleccionado. 4 Renombrar el archivo o carpeta seleccionado. 5 Opciones varias, Copiar o Mover el archivo seleccionado, seleccionar la carpeta actual como directorio de trabajo (reemplaza al comando setwd(...)) , entre otras opciones. 3.1.8 Panel de gráficos La función del panel de gráficos es mostrarnos en este espacio los gráficos que se vayan creando en el entorno de R para una rápida consulta y navegación entre ellos, pero se debe de tener cuidado, si el espacio dejado para este panel es muy pequeño, cuando se intente crear un gráfico, RStudio regresará un error. Las opciones más importantes en el panel son las siguientes: Identificador Uso o significado 1 Ir a la gráfica anterior o siguiente. 2 Realizar Zoom a la gráfica actual. 3 Exportar la gráfica actual. 4 Remover la gráfica actual. 5 Limpiar el entorno de todas las gráficas realizadas. 6 Publicar la gráfica en RPubs. 7 Volver a cargar el panel. 3.1.9 Panel de Paquetes Sin duda un panel que tendrá mucha utilidad, permite conocer de manera rapida los paquetes que tenemos instalados y actualizarlos de ser necesario. Opciones Paquetes Dentro de las opciones de este panel tenemos: Identificador Uso o significado 1 Instalar uno o varios paquetes. 2 Actualizar todos los paquetes que tengan una nueva versión disponible. 3 Buscar un paquete. 4 Actualizar el panel. 3.1.10 Panel de ayuda Otro panel sencillo y de gran utilidad, aquí se mostrará la documentación de alguna función, paquete o sobre Rstudio, se puede acceder a el de manera sencilla al estar en el panel de código y tener seleccionada la función o paquete y presionar la tecla [F1], dentro de las caracteristicas de este panel tenemos Identificador Uso o significado 1 Navegar entre las paginas consultadas, 2 Ir a la página inicial de ayuda. 3 Imprimir la hoja de ayuda actual. 4 Mostrar el panel en una ventana separada(por si no nos ajusta el tamaño de la ventana). 5 Buscar ayuda con un paquete o funcion especifico. 3.1.11 Panel de visualización La función de este panel es mostrarnos la versión web cuando estamos trabajando con documentos en RMarkdown. Por ejemplo, este documento está diseñado en RMarkdown, por lo que se muestra en el panel de la siguiente manera: Las opciones de este panel son reducidas pues es como un navegador de internet pero solo para nuestro documento, por lo que las opciones que tiene son las siguientes: Opciones de Visualización Identificador Uso o significado 1 Remover la vista actual. 2 Remover todas las vistas. 3 Abrir la vista actual en nuestro navegador web predeterminado. 3.2 Proyectos Un proyecto en RStudio es una carpeta que el programa reconoce como un espacio de trabajo de R, donde dependiendo de las especificaciones iniciales, se puede mantener las versiones del proyecto, crear un paquete para R, una aplicación web con la libreria shiny, entre otras cosas útiles, pero siempre manteniendo el orden de los trabajos ya que además de mantener organizados los códigos, RStudio permite recuperar las pestañas abiertas sin importar si se cambio de proyecto, RStudio fue cerrado o si se apagó el sistema operativo. Para crear un nuevo proyecto, tenemos nuestro entorno de una forma muy parecida a la siguiente Rstudio En la parte superior derecha está el botón para crear un nuevo proyecto Nuevo Proyecto Si accedemos al botón podremos ver las siguientes opciones, New Project desplegará una ventana para ayudarnos a escoger entre varias opcione. Nuevo Proyecto Las opciones son las siguientes: Nuevo Proyecto Si lo que buscamos es crear un nuevo proyecto desde cero,entonces seleccionaremos New Directory, por otro lado, si ya tenemos una carpeta con nuestros archivos de R, se puede escoger la opción Existing Directory, la cuál tomará una carpeta normal y la adecuará a nuestro entorno de Rstudio, si se cuenta con la experiencia de haber trabajado con anterioridad con un programa de control de versiones como git o SVN y alguno de ellos está disponible en la maquina, se podrá utilizar la tercera opción, la cuál nos ayudará a mantener aun más organizado nuestro código. Empezarémos creando un proyecto vacío. Nuevo Proyecto Tenemos varias opciones, como será un proyecto para trabajar los ejercicios de R usaremos la primera opción. Nuevo Proyecto En la ventana de «Crear un nuevo proyecto» podremos escoger el nombre de nuestra carpeta y donde se creará, además nos da dos opciones para integrar nuestro control de versiones git o usar la libreria packrat, la cuál se dedica a volver . Nuevo Proyecto "],
["RMarkDown.html", "Capítulo 4 Introducción a R-Markdown 4.1 Sintaxis de Markdown 4.2 RMarkdown 4.3 Bloques de código ejecutables", " Capítulo 4 Introducción a R-Markdown 4.1 Sintaxis de Markdown Esta es una rápida referencia de como usar Markdown, para consultar más información sobre Markdown usar el siguiente enlace Github-flavored Markdown info page. 4.1.1 Encabezados o Títulos # H1 ## H2 ### H3 #### H4 ##### H5 ###### H6 De manera alternativa, Para los encabezados de primer y segundo nivel pueden ser utilizados de la siguiente manera: Alt-H1 ====== Alt-H2 ------ 4.1.2 Texto Para usar texto en itálica (cursiva), es a través de *asteriscos* o _Guion bajo_. Para usar texto en negritas, es a través de **doble asterisco** o __doble guión bajo__. Es posible combinarlos con **Una parte en negritas y __además en cursiva__** Para tachar algo usar ~~Texto no deseado~~. DEMOSTRACIÓN Para usar texto en itálica (cursiva), es a través de asteriscos o Guion bajo. Para usar texto en negritas, es a través de doble asterisco o doble guión bajo. Es posible combinarlos con Una parte en negritas y además en cursiva Para tachar algo usar Texto no deseado. 4.1.3 Listas 1. Primer elemento en la lista. 2. Un elemento más. * Una sub-lista o elemento anidado. 1. No importa la numeración, solo son números. 1. Una sub-lista anidada. 4. Último elemento. Otro tipo de listas: * Las listas no ordenadas pueden usar asteriscos - O el símbolo de menos + O el símbolo de más Primer elemento en la lista. Un elemento más. Una sub-lista o elemento anidado. No importa la numeración, solo son números. Una sub-lista anidada. Último elemento. Otro tipo de listas: Las listas no ordenadas pueden usar asteriscos O el símbolo de menos O el símbolo de más 4.1.4 Enlaces Existen varás formas de crear enlaces: [Enlace a google](https://www.google.com) [Enlace a google con título](https://www.google.com &quot;Página de Google&quot;) [Enlace a google][Texto de referencia al enlace] [También es posible usar números para realizar referencias][1] o dejarlo vacío y usar el enlace como propio texto [texto]. URLs y URLs entre los símbolos `&lt;` y `&gt;` automáticamente serán transformados a enlace. http://www.example.com o &lt;http://www.example.com&gt;. [Texto de referencia al enlace]: https://www.google.com [1]: https://www.google.com [texto]: https://www.google.com DEMOSTRACIÓN: Enlace a google Enlace a google con título Enlace a google También es posible usar números para realizar referencias o dejarlo vacío y usar el enlace como propio texto texto. URLs y URLs entre los símbolos &lt; y &gt; automáticamente serán transformados a enlace. http://www.example.com o http://www.example.com. 4.1.5 Imágenes ![Texto alternativo](./assets/images/escudo_uqroo_negro.png &quot;Logo UQroo&quot;) Reference-style: ![Texto alternativo][logo] [logo]: ./assets/images/logo_full.png &quot;Logo UQroo&quot; DEMOSTRACIÓN: Referencia en la misma linea: Mediante referencia de texto: 4.1.6 Tablas El símbolo de dos puntos : es usado como alineado de columnas | Ejemplo | de una | Tabla | |:---------------|:-------------:|---------------:| | La columna tres| está alineada | a la derecha | | La columna dos | está | centrada | | La columna uno | está alienada | a la izquierda | DEMOSTRACIÓN: Ejemplo de una Tabla La columna tres está alineada a la derecha La columna dos está centrada La columna uno está alienada a la izquierda Es necesario que en cada columna haya por lo menos 3 lineas separando cada celda, donde las barras de los extremos son opcionales (|), además de que no es necesario (Pero es preferible), que la tabla tenga que estar alineada en las columnas como se muestra en el siguiente código, esta se seguirá mostrando igual que una alineada: Ejemplo | de una | Tabla --- | --- | --- Menos | ordenada | que la | tabla | anterior DEMOSTRACIÓN: Ejemplo de una Tabla Menos ordenada que la tabla anterior 4.1.7 Bloques de cita &gt; Los bloques de cita son especialmente útiles para enfatizar. &gt; También para realizar citas de texto. &gt; &gt; Esta linea también pertenece al bloque. Esta linea ya no pertenece al bloque al estar separado por un salto de línea. &gt; Sin embargo, siempre es posible utilizar nuevamente los bloques de citas, aunque sean de una línea. DEMOSTRACIÓN: Los bloques de cita son especialmente útiles para enfatizar. También para realizar citas de texto. Esta linea también pertenece al bloque. Esta linea ya no pertenece al bloque al estar separado por un salto de línea. Sin embargo, siempre es posible utilizar nuevamente los bloques de citas, aunque sean de una línea. 4.1.8 HTML en Markdown Es posible insertar código en HTML dentro de Markdown, esto con el fin de añadir algunas funcionalidades que Markdown carece. Por ejemplo, poner el texto de &lt;span style=&quot;color:#DA0101&quot;&gt;otro color&lt;/span&gt;. Por ejemplo, poner el texto de otro color. 4.1.9 Lineas horizontales Es posible poner lineas horizontales para separar zonas de texto usando alguno de los siguientes códigos: Una línea hecha con tres líneas --- O con tres asteriscos *** o tres guiones bajos ___ DEMOSTRACIÓN: Una línea hecha con tres líneas O con tres asteriscos o tres guiones bajos 4.1.10 Saltos de línea Al igual que LaTeX, Markdown necesita doble salto de línea para poder separar párrafos de texto, así como para poder crear tablas, bloques de código o de citas, etc., en caso de que una parte del escrito no se muestre como lo planeado, se tendrá que incluir un salto de línea para separar los dos contextos, ejemplo: La siguiente tabla no se visualiza: | Tabla | Ejemplo | |:-----:|:-------:| | 1 | 2 | Demostración: La siguiente tabla no se visualiza: | Tabla | Ejemplo | |:—–:|:——-:| | 1 | 2 | Corrección: La siguiente tabla ya se visualiza: | Tabla | Ejemplo | |:-----:|:-------:| | 1 | 2 | Demostración: La siguiente tabla ya se visualiza: Tabla Ejemplo 1 2 4.1.11 Código y Resaltado de Sintaxis Los bloques de código son parte de la sintaxis de Markdown, pero, el resaltado de sintaxis no lo es, sin embargo, muchos programas que trabajan con Markdown para exportarlo a HTML ya lo incluyen, tal es el caso como RStudio con RMarkdown, que nos permitira crear bloques especiales para lenguajes como R, Python, Sql, Bash, RCpp. Existen otros programas que incluyen otros lenguajes para el resaltado de sintaxis, por el momento veremos más a detalle RMarkdown y su forma de trabajar uniendo Markdown y R. En **Markdown** para resaltar partes de `código` es necesario ponerlo entre `comillas inversas`. DEMOSTRACIÓN: En Markdown para resaltar partes de código es necesario ponerlo entre comillas inversas. Los bloques de código, por otra parte, es necesario ponerlo entre tripes comillas inversas y especificar al lenguaje que pertenece ```r x DEMOSTRACIÓN: x &lt;- matrix(NA, ncol=3, nrow=3) 4.2 RMarkdown RMarkdown es una variación del Markdown que integra la facilidad de su estructura con la potencia y desarrollo de R, dicha variación fué desarrollado para crear documentos interactivos, para facilitar la transmisión de ideas entre los desarrolladores de R sin tener que preocuparse por tener que desarrollar la documentación con diversos programas y tener que actualizar los documentos en cada ocasión que se modifica el código, además RMarkdown permite desde un mismo código crear versiones en pdf, word y html del mismo. Existen algunas diferencias entre Markdown y RMarkdown, mismas que se van a detallar a continuación: 4.2.1 Ecuaciones matemáticas Si algo le hizo falta a Markdown, fué la integración con las ecuaciones matematicas, es por ello que fué integrado con Rmarkdown para facilitar la explicación de las ecuaciones matematicas que van implicadas en el código, la manera de escribir ecuaciones es como en \\(\\LaTeX\\), rodeado de un símbolo $ al inicio y final para escribirlo en la misma linea del texto y doble $$ para hacerlo en una nueva línea, ejemplo: $$ x^2 - \\sqrt{25} = 20 $$ Donde $x$ es la incognita. Este código al ser compilado en RMarkdown se obtiene la siguiente salida: \\[ x^2 - \\sqrt{25} = 20 \\] Donde \\(x\\) es la incognita. La escritura de ecuaciones matemáticas como en \\(\\LaTeX\\) nos permite no solo reducir la cantidad de errores en cuanto a las ecuaciones, si no, tambien tener una excelente vizualicación de ellos. 4.3 Bloques de código ejecutables Al hablar de Markdown, se habló un poco de los bloques de código, dichos bloques sirven para mostrar el código que "],
["apendA.html", "Capítulo 5 Apendice A", " Capítulo 5 Apendice A Aritméticos Lógicos Comparativos + Adición == Igual a &amp; Y Lógico - Substracción != Diferente de ! No Lógico * Multiplicación &lt; Menor que / División &gt; Mayor que is.na(x) ¿Es NA? \\(\\hat{ }\\) Potencia &lt;= Menor o igual a is.null(x) ¿Es Null? %/% División de enteros &gt;= Mayor o igual a is.nan(x) ¿Es NaN? Función Matemáticas Función Estadísticas sqrt(x) Raíz de \\(x\\) mean(x) Media exp(x) Exponencial de \\(x\\) sd(x) Desviación estándar log(x) Logaritmo natural de \\(x\\) var(x) Varianza log10(x) Logaritmo base 10 median(x) Mediana sum(x) Suma de los elementos de \\(x\\) quantiles(x) Quantiles prod(x) Producto de los elementos de \\(x\\) cor(x,y) Correlación sin(x) Seno max(x) Valor máximo cos(x) Coseno min(x) Valor mínimo tan(x) Tangente range(x) Retorna el máximo y mínimo round(x,n) Redondea a \\(n\\) dígitos sort(x) Ordena los elementos de \\(x\\) cumsum(x) Calcula las sumas acumuladas summary Resumen de las variables (\\(x_1, x_1 + x_2, + x_1 +\\ldots+x_n\\)) choose(n,k) Combinatoria de \\(n\\) sobre \\(k\\) Distribución Función de densidad distribución acumulada función cuantil Uso de numeros aleatorios Normal dnorm(…) pnorm(…) qnorm(…) rnorm(…) Uniforme dunif(…) punif(…) qunif(…) runif(…) Student’s t dt(…) pt(…) qt(…) rt(…) Chi-cuadrada dchisq(…) pchisq(…) qchisq(…) rchisq(…) Gamma dgamma(…) pgamma(…) qgamma(…) rgamma(…) Normal Multivariada dmvnorm(…) pmvnorm(…) rmvnorm(…) Student’s t Multivariada dmvt(…) pmvt(…) qmvt(…) rmvt(…) Exponencial dexp(…) pexp(…) qexp(…) rexp(…) Cauchy dcauchy(…) pcauchy(…) qcauchy(…) rcauchy(…) Wishart dwish(…) rwish(…) "]
]
